{
  "description": "Spiral power.",

  "initialDialogue":[
    ["· · ·"],
    ["(Only silence is heard.)", "(Words cannot reach here.)", "(Warning: excessive aural interference.)", "(Warning: excessive visual interference.)", "(Silence.)", "(Noise.)", "(Warning: speech-to-text input is likely unavailable.)", "(Sound is oversaturated.)", "(Icy silence descends upon this flesh grove.)"],
    ["(Evade the inedible parts.)", "(Bone and skin writhe within.)", "(Rhythmic traps fill all the gaps.)", "(Through rhythmic gaps, escape the traps.)", "(There is no evading these projectiles.)", "(There are too many.)", "(Punch through or be buried.)", "(What is a drop of rain, compared to the storm?)", "(Lay the bones, or become one.)", "(Dig or be dug.)", "(Pain always catches up to those who choose to stay.)"],
    ["(Hold on though, I'll sweep it aside in a moment.)"]
  ],

  "funcs":{
    "dialogue":"async function dialogue(words, at) { await Promise.all(words.map(w => api.window(w, [.05 + .9*Math.random(), .05 + .9*Math.random()], 32))) }",
    "initialDialogue":"async function initialDialogue() { const at=null;  for (let entry of level.initialDialogue) await dialogue(entry, at) }",
    "makeItEasier":"function makeItEasier() { 'no' }",
    "main":"async function main() { makeItEasier(), await initialDialogue() }"
  },

  "onLoad": "let s='';    for (let k in level.funcs) s += 'const '+k+'=level.funcs.'+k+'='+level.funcs[k]+'\\n';    new Function('L', s+'\\nreturn main()')(level)",
  "winScore": 200,
  "onWon": "(async function() { api.levelSuggest('levels/x2/7.json'), api.levelSuggest('levels/backgrounds/2.json', {won:0}), api.levelSuggest('levels/backgrounds/3.json', {won:0}); \n level.iGrowthCenter[2]=.51, api.write();  let L=level, n=0, fiery=Math.random(), id=setInterval(() => { if (L===level && n++<100) fiery>.2 && (L.iOffset[1]-=.1), fiery<.6 && (L.iKernelOffset[1]+=fiery<.3?.24:.1), api.write(); else clearInterval(id) }, 100); \n await api.window(`(Stand by.)`, null, 32);  api.levelLoad('levels/x2/7.json') })()",

  "onLost": "let L=level, n=0, fiery=Math.random(), id=setInterval(() => { if (L===level && n++<100) fiery>.2 && (L.iOffset[1]-=.1), fiery<.6 && (L.iKernelOffset[1]+=fiery<.3?.24:.1), api.write(); else clearInterval(id) }, 100); \n api.window([`(LOSER)`, `(Pfffbt.)`, `(HA)`, `(HA HA HA)`, `(Look at this idiot.)`, `(How can anyone possibly lose here?)`, `(AHHH HAH HA HAAAA)`, `(Dodge, noob.)`][Math.random()*8|0], 'pointer1', 32).then(() => api.levelLoad())",

  "iColorMatrix": [
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
  ],

  "width": 512, "height": 512, "radius": 5,
  "iSlowdown": 2,

  "iMixing": [
    0.756, -0.575, -0.774,
     0.12, -0.376,  0.615,
     0.16, -0.762,  0.968
  ],
  "kernel":{"center":[0.502,0.5,0.5],"width":[0.09,0.1,0.1]},
  "iGrowthCenter":[0.5,0.5,0.5],
  "iGrowthWidth":[0.303,0.2,0.2],
  "iOffset": [0,0], "iKernelOffset": [0,0],

  "actors": {
    "pointer1": {"displayRadius":[0,16,0], "pos":[0.5, 0.25], "emitRadius":16, "emit":"green", "emittance":0.2, "speed":{"Bmouse":0.01, "Bg":-0.007, "Bb":-0.007, "Bspeed": 0.93}, "dhealth":{"B1":0.003, "Bg":-0.09}, "dscore":{"B1":0.025}, "trackLost":true},
    "emitter1": {"pos":[0.25, 0.45, 0, 0.004], "emitRadius":50, "emit":"blue", "emittance":{"Bhealth":1}, "dhealth":{"B1":-0.0001}, "target":"emitter2", "speed":{"Btarget":0.0001, "Bspeed":1}},
    "emitter2": {"pos":[0.35, 0.45, 0, -0.004], "emitRadius":50, "emit":"red", "emittance":0, "target":"emitter1", "speed":{"Btarget":0.0001, "Bspeed":1}},
    "center": {"pos":[0.5, 0.5]}
  }
}