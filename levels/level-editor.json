{
    "description": "Explore the Lenia space by yourself.",

    "history":[],
    "symmetrizeRGBKernel":false,
    "funcs":{
      "updateSim":"function updateSim() { return level._json.textContent = localStorage['level-editor '+level.url] = JSON.stringify({iMixing:level.iMixing, kernel:level.kernel, iGrowthCenter:level.iGrowthCenter, iGrowthWidth:level.iGrowthWidth, iOffset:level.iOffset, iKernelOffset:level.iKernelOffset}) }",
      "f":"function f(s,i, a = ()=>level.iMixing, updateUI = updateSim) { return [s+':', [{tag:'input', title:a()[i], type:'range', min:-3, max:3, step:0.001, value:a()[i], oninput() { a()[i] = +this.value, this.nextSibling.textContent = this.title = this.value, updateUI(), api.write() }}], a()[i], [{tag:'br'}]] }",
      "symmetrizingLoop":"function symmetrizingLoop() { const L=level;  g();  function g() { if (L!==level) return;  requestAnimationFrame(g);  const K=level.kernel, R=level.radius;  if (!K.r) return;  if (eq(K.r, R) || eq(K.g, R) || eq(K.b, R)) api.write() } function eq(a, R) { let changed = false, W = 2*R+1;  for (let i=0; i<a.length; ++i) if (a[i]<0 || a[i]>1) changed=true, a[i] = Math.max(0, Math.min(a[i], 1));  if (level.symmetrizeRGBKernel) for (let x=0; x<=R; ++x) for (let y=0; y<=R; ++y) { const x2=2*R-x, y2=2*R-y, avg = (a[y*W+x] + a[y*W+x2] + a[y2*W+x] + a[y2*W+x2]) / 4;  if (a[y*W+x] !== avg) changed=true, a[y*W+x] = a[y*W+x2] = a[y2*W+x] = a[y2*W+x2] = avg }  return changed } }",
      "UIpointer":"function UIpointer() { return [{tag:'details'}, [{tag:'summary'}, 'Pointer'], [{tag:'select', oninput() { for (let k in level.actors) if (k.slice(0,7) === 'pointer') level.actors[k].emit = this.value, api.write(k) }}, [{tag:'option', value:'green'}, 'Green'], [{tag:'option', value:'red', selected:''}, 'Red'], [{tag:'option', value:'blue'}, 'Blue']], [{tag:'br'}], f('Emittance 1', 'emittance', ()=>level.actors.pointer, x => api.write('pointer')), f('Emittance 2', 'emittance', ()=>level.actors.pointer2, x => api.write('pointer2')), f('Emittance 3', 'emittance', ()=>level.actors.pointer3, x => api.write('pointer3'))] }",
      "UIkernel":"function UIkernel() { const kc=()=>level.kernel.center, kw=()=>level.kernel.width;    return [{tag:'details'}, [{tag:'summary'}, 'Conv kernel'], [{tag:'div'}, [{tag:'input', type:'checkbox', id:'gtnetnvdn', checked:!!level.kernel.r, onchange() { const K = level.kernel;  if (this.checked) K.r = a(), K.g = a(), K.b = a(); else delete K.r, delete K.g, delete K.b;  updateSim(), api.write();  function a() { return new Array((2*level.radius+1)*(2*level.radius+1)).fill(0) } }}], [{tag:'label', for:'gtnetnvdn'}, ' Non-Lenia (individual numbers; evolve them)']], [{tag:'div'}, [{tag:'input', type:'checkbox', id:'gtnetnvdnz', onchange() { level.symmetrizeRGBKernel = !!this.checked } }], [{tag:'label', for:'gtnetnvdnz'}, ' Always-symmetric non-Lenia kernel']], [{tag:'div'}, [{tag:'input', type:'checkbox', id:'frsniferer', onchange() { level.visualizeKernel = !!this.checked } }], [{tag:'label', for:'frsniferer'}, ' Visualize the conv kernel']],      f('R mean', 0, kc), f('G mean', 1, kc), f('B mean', 2, kc), f('R stdev', 0, kw), f('G stdev', 1, kw), f('B stdev', 2, kw)] }",
      "UIactivation":"function UIactivation() { const gc=()=>level.iGrowthCenter, gw=()=>level.iGrowthWidth;    return [{tag:'details'}, [{tag:'summary'}, 'Activation/growth'], f('R mean', 0, gc), f('G mean', 1, gc), f('B mean', 2, gc), f('R stdev', 0, gw), f('G stdev', 1, gw), f('B stdev', 2, gw)] }",
      "UImixing":"function UImixing() { return [{tag:'details'}, [{tag:'summary'}, 'Mixing'], f('R→R', 0), f('R→G', 3), f('R→B', 6), f('G→R', 1), f('G→G', 4), f('G→B', 7), f('B→R', 2), f('B→G', 5), f('B→B', 8)] }",
      "UIwind":"function UIwind() { return [{tag:'details'}, [{tag:'summary'}, 'Wind'], f('Offset x', 0, ()=>level.iOffset), f('Offset y', 1, ()=>level.iOffset), f('Kernel offset x', 0, ()=>level.iKernelOffset), f('Kernel offset y', 1, ()=>level.iKernelOffset)] }",
      "UIevolve":"function UIevolve() { let mutating=0;  return [{tag:'details'}, [{tag:'summary'}, 'Mutate'], [{tag:'select', oninput() { mutating = +this.value }}, [{tag:'option', value:0}, 'Everything'], [{tag:'option', value:1}, 'Mixing'], [{tag:'option', value:2}, 'Growth center'], [{tag:'option', value:3}, 'Growth width'], [{tag:'option', value:4}, 'Kernel center'], [{tag:'option', value:5}, 'Kernel width'], [{tag:'option', value:6}, 'Kernel R'], [{tag:'option', value:7}, 'Kernel G'], [{tag:'option', value:8}, 'Kernel B']], [{tag:'br'}],       [{tag:'button', onclick:revert}, 'Revert'], [{tag:'button', onclick:()=>mutate(false, mut())}, 'A bit'], [{tag:'button', onclick:()=>mutate(true, mut())}, 'A lot']];      function mut() { return [undefined, level.iMixing, level.iGrowthCenter, level.iGrowthWidth, level.kernel.center, level.kernel.width, level.kernel.r, level.kernel.g, level.kernel.b][mutating] } }",
      "simulationUI":"function simulationUI() { return [{tag:'div'}, UIpointer(), UIkernel(), UIactivation(), UImixing(), UIwind(), UIevolve(), [{tag:'button', onclick:clear}, 'Clear Lenia state']] }",
      "ui":"function ui() { let json = level._json = document.createElement('textarea');   json.style.resize='none', json.readOnly = true, json.rows=4;  const saved = json.textContent = localStorage['level-editor '+level.url]; if (saved) Object.assign(level, JSON.parse(saved)), api.write();    api.window([json, simulationUI(), [{tag:'a', href:'https://github.com/Antipurity/lenia-game/tree/master/levels/README.md'}, 'How to fully make a level']], null, null) }",
      "clear":"function clear() { if (clear.id != null) return;  const L=level;  const a=level.iMixing.slice();  level.iMixing.fill(0);  clear.id = setTimeout(() => { clear.id=null;  if (L === level) for (let i=0; i < a.length; ++i) level.iMixing[i]=a[i] }, 500) }",
      "revert":"function revert() { if (level.history.length) Object.assign(level, level.history.pop()), updateSim(), api.write() }",
      "mutate":"function mutate(lots=true, target = [level.iMixing, level.kernel.center, level.kernel.width, level.iGrowthCenter, level.iGrowthWidth][Math.random()*5|0]) { const i = Math.random()*target.length|0;  const op = !lots ? x=>x+(Math.random()-.5)*.2 : [x=>Math.random()*2-1, x=>x+(Math.random()-.5), x=>x*(Math.random()*2), x=>-x][Math.random()*4|0];  level.history.push(JSON.parse(updateSim()));  target[i] = op(target[i]);  api.write() }",
      "main":"function main(L) { symmetrizingLoop(), ui() }"
    },
    "onLoad": "let s='';    for (let k in level.funcs) s += 'const '+k+'=level.funcs.'+k+'='+level.funcs[k]+'\\n';    new Function('L', s+'\\nreturn main()')(level)",
    "winScore": 0,
    "onLost": "setTimeout(api.levelLoad, 3000)",

    "iColorMatrix": [
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    ],

    "width": 512, "height": 512, "radius": 4,
    "iSlowdown": 4,

    "iMixing":[0.5818229887313493,-2.7028805880986937,0.5324909256965203,0.503936535045058,0.5380102971217748,-1.93201657690383,-2.971476579819984,1.22957429371385,0.4228016566310547],"kernel":{"center":[0.7736577658884869,0.796539338281215,1.0014798755298293],"width":[-0.56253967189834,-0.1813619519624179,-0.01720420271815147]},"iGrowthCenter":[-0.14977441317942114,0.28370332163940176,1.1132047879781313],"iGrowthWidth":[0.06818685175259666,0.17055511763976566,-0.630442896031661],"iOffset":[0,0],"iKernelOffset":[0,0],

    "actors": {
      "pointer": {"displayRadius":[0,16,0], "pos":[0.5, 0.25], "emitRadius":16, "emit":"green", "emittance":0.2, "speed":{"Bmouse":0.01, "Bspeed": 0.93}, "trackLost":true},
      "pointer2": {"displayRadius":[0,0,0], "pos":[0.5, 0.25], "emitRadius":8, "emit":"green", "emittance":0, "speed":{"Btarget":0.01, "Bg":-0.003, "Bb":-0.003, "Bspeed": 0.93}, "target":"pointer"},
      "pointer3": {"displayRadius":[0,0,0], "pos":[0.5, 0.25], "emitRadius":8, "emit":"green", "emittance":0, "speed":{"Btarget":0.01, "Bg":-0.003, "Bb":-0.003, "Bspeed": 0.93}, "target":"pointer2"},
      "emitter1": {"pos":[0.45, 0.75, 0, 0.004], "emitRadius":50, "emit":"blue", "emittance":0, "target":"emitter2", "speed":{"Btarget":0.0001, "Bspeed":1}},
      "emitter2": {"pos":[0.55, 0.75, 0, -0.004], "emitRadius":50, "emit":"red", "emittance":0, "target":"emitter1", "speed":{"Btarget":0.0001, "Bspeed":1}}
    }
}