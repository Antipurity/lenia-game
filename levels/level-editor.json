{
    "description": "Explore the Lenia space by yourself.",

    "history":[],
    "funcs":{
      "updateSim":"function updateSim() { return level._json.textContent = localStorage['level-editor '+level.url] = JSON.stringify({iMixing:level.iMixing, kernel:level.kernel, iGrowthCenter:level.iGrowthCenter, iGrowthWidth:level.iGrowthWidth, iOffset:level.iOffset, iKernelOffset:level.iKernelOffset}) }",
      "f":"function f(s,i, a = level.iMixing, updateUI = updateSim) { return [s+':', [{tag:'input', title:a[i], type:'range', min:-3, max:3, step:0.001, value:a[i], oninput() { a[i] = +this.value, this.nextSibling.textContent = this.title = this.value, updateUI(), api.write() }}], a[i], [{tag:'br'}]] }",
      "UIpointer":"function UIpointer() { return [{tag:'details'}, [{tag:'summary'}, 'Pointer'], [{tag:'select', oninput() { for (let k in level.actors) if (k.slice(0,7) === 'pointer') level.actors[k].emit = this.value, api.write(k) }}, [{tag:'option', value:'green'}, 'Green'], [{tag:'option', value:'red', selected:''}, 'Red'], [{tag:'option', value:'blue'}, 'Blue']], [{tag:'br'}], f('Emittance 1', 'emittance', level.actors.pointer, x => api.write('pointer')), f('Emittance 2', 'emittance', level.actors.pointer2, x => api.write('pointer2')), f('Emittance 3', 'emittance', level.actors.pointer3, x => api.write('pointer3'))] }",
      "UIkernel":"function UIkernel() { const kc=level.kernel.center, kw=level.kernel.width;    return [{tag:'details'}, [{tag:'summary'}, 'Conv kernel'], f('R mean', 0, kc), f('G mean', 1, kc), f('B mean', 2, kc), f('R stdev', 0, kw), f('G stdev', 1, kw), f('B stdev', 2, kw)] }",
      "UIactivation":"function UIactivation() { const gc=level.iGrowthCenter, gw=level.iGrowthWidth;    return [{tag:'details'}, [{tag:'summary'}, 'Activation/growth'], f('R mean', 0, gc), f('G mean', 1, gc), f('B mean', 2, gc), f('R stdev', 0, gw), f('G stdev', 1, gw), f('B stdev', 2, gw)] }",
      "UImixing":"function UImixing() { return [{tag:'details'}, [{tag:'summary'}, 'Mixing'], f('R→R', 0), f('R→G', 3), f('R→B', 6), f('G→R', 1), f('G→G', 4), f('G→B', 7), f('B→R', 2), f('B→G', 5), f('B→B', 8)] }",
      "UIwind":"function UIwind() { return [{tag:'details'}, [{tag:'summary'}, 'Wind'], f('Offset x', 0, level.iOffset), f('Offset y', 1, level.iOffset), f('Kernel offset x', 0, level.iKernelOffset), f('Kernel offset y', 1, level.iKernelOffset)] }",
      "UIevolve":"function UIevolve() { 'TODO: Also want a free-kernel mode, right?';  let onlyKernel=false;  return [{tag:'details'}, [{tag:'summary'}, 'Mutate'], [{tag:'input', type:'checkbox', id:'zasdxvcx', onchange() { onlyKernel = !!this.checked }}], [{tag:'label', for:'zasdxvcx'}, 'Only mixing'], [{tag:'br'}], [{tag:'button', onclick:revert}, 'Revert'], [{tag:'button', onclick:()=>mutate(false, onlyKernel ? level.iMixing : undefined)}, 'A bit'], [{tag:'button', onclick:()=>mutate(true, onlyKernel ? level.iMixing : undefined)}, 'A lot']] }",
      "simulationUI":"function simulationUI() { return [UIpointer(), UIkernel(), UIactivation(), UImixing(), UIwind(), UIevolve(), [{tag:'button', onclick:clear}, 'Clear Lenia state']] }",
      "ui":"function ui() { let json = level._json = document.createElement('textarea');   json.style.resize='none', json.readOnly = true;   const saved = json.textContent = localStorage['level-editor '+level.url]; if (saved) Object.assign(level, JSON.parse(saved));    api.window([json, simulationUI()], null, null) }",
      "clear":"function clear() { if (clear.id != null) return;  const L=level;  const a=level.iMixing.slice();  level.iMixing.fill(0);  clear.id = setTimeout(() => { clear.id=null;  if (L === level) for (let i=0; i < a.length; ++i) level.iMixing[i]=a[i] }, 500) }",
      "revert":"function revert() { if (level.history.length) Object.assign(level, level.history.pop()), updateSim() }",
      "mutate":"function mutate(lots=true, target = [level.iMixing, level.kernel.center, level.kernel.width, level.iGrowthCenter, level.iGrowthWidth][Math.random()*5|0]) { const i = Math.random()*target.length|0;  const op = !lots ? x=>x+(Math.random()-.5)*.2 : [x=>Math.random()*2-1, x=>x+(Math.random()-.5), x=>x*(Math.random()*2), x=>-x][Math.random()*4|0];  level.history.push(JSON.parse(updateSim()));  target[i] = op(target[i]);  updateSim() }",
      "main":"function main(L) { ui() }"
    },
    "onLoad": "let s='';    for (let k in level.funcs) s += 'const '+k+'=level.funcs.'+k+'='+level.funcs[k]+'\\n';    new Function('L', s+'\\nreturn main()')(level)",
    "winScore": 10000,
    "onLost": "setTimeout(api.levelLoad, 3000)",

    "iColorMatrix": [
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    ],

    "width": 512, "height": 512,
    "iSlowdown": 4,

    "iMixing": [
        0.75,   -1,  0.95,
        -1.0,  3.0,   -2,
          -2,  1.3,    1
    ],
    "kernel":{
      "center": [0.5, 0.5, 0.5],
      "width": [0.1, 0.14, 0.14]
    },
    "iGrowthCenter": [0.4, 0.2, 0.4], "iGrowthWidth": [0.08, 0.04, 0.1],
    "iOffset": [0,0], "iKernelOffset": [0,0],

    "actors": {
      "pointer": {"displayRadius":[0,16,0], "pos":[0.5, 0.25], "emitRadius":16, "emit":"green", "emittance":0.2, "speed":{"Bmouse":0.01, "Bspeed": 0.93}, "trackLost":true},
      "pointer2": {"displayRadius":[0,0,0], "pos":[0.5, 0.25], "emitRadius":8, "emit":"green", "emittance":0, "speed":{"Btarget":0.01, "Bg":-0.003, "Bb":-0.003, "Bspeed": 0.93}, "target":"pointer"},
      "pointer3": {"displayRadius":[0,0,0], "pos":[0.5, 0.25], "emitRadius":8, "emit":"green", "emittance":0, "speed":{"Btarget":0.01, "Bg":-0.003, "Bb":-0.003, "Bspeed": 0.93}, "target":"pointer2"},
      "emitter1": {"pos":[0.45, 0.75, 0, 0.004], "emitRadius":50, "emit":"blue", "emittance":0, "target":"emitter2", "speed":{"Btarget":0.0001, "Bspeed":1}},
      "emitter2": {"pos":[0.55, 0.75, 0, -0.004], "emitRadius":50, "emit":"red", "emittance":0, "target":"emitter1", "speed":{"Btarget":0.0001, "Bspeed":1}}
    }
}