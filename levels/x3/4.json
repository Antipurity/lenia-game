{
  "description": "We have ascended beyond mere nanotech.\nNow, we have achievedâ€¦\nPAINT",

  "image":[
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,1,1,1,1,1,1,0,
    0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,1,0,0,0,1,0,1,0,
    0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,1,0,
    0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,1,0,2,0,0,0,0,0,0,0,2,1,1,2,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,2,1,1,2,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,1,0,0,1,0,0,2,0,2,0,2,0,0,2,0,3,0,0,0,3,0,0,3,0,0,
    0,0,0,0,0,1,0,1,0,0,1,0,0,2,0,2,0,2,0,0,2,0,0,3,0,3,0,0,0,3,0,0,
    0,0,0,0,0,1,0,1,0,1,1,1,0,0,2,0,0,0,2,0,2,0,3,0,0,3,0,0,0,3,0,0,
    0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,2,0,0,0,2,2,0,0,3,0,0,3,0,3,0,3,0,
    0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,2,0,2,2,0,2,0,3,0,0,3,0,0,3,0,3,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,
    0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,0,
    0,0,2,0,2,3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,
    0,2,2,0,2,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,
    0,0,0,2,0,3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,
    0,2,2,0,2,2,3,0,3,0,0,0,0,3,3,0,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,0,
    0,0,2,0,2,0,0,0,0,0,0,0,0,3,3,0,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0
  ],

  "initialDialogue":[
  ],

  "funcs":{
    "dialogue":"async function dialogue(words, at, momentum=undefined) { await Promise.all(words.map(w => api.window(w, at || [.05 + .9*Math.random(), .05 + .9*Math.random()], 32, momentum))) }",
    "initialDialogue":"async function initialDialogue() { const at=null;  for (let obj of level.initialDialogue) await Promise.all(Object.keys(obj).map(k => k !== 'js' ? dialogue([obj[k]], level.actors[k] ? k : null, level.actors[k] ? level.actors[k].momentum : undefined) : new Function(obj[k])())) }",
    "makeItEasier":"function makeItEasier() { 'no' }",
    "phaseChange":"function phaseChange(phases) { let L=level;  check();  function check() { if (L!==level || !phases.length) return;  requestAnimationFrame(check);  if (typeof phases[0] == 'function' ? phases[0](level.score) : level.score >= phases[0]) phases.shift(), phases.shift()(); } }",
    "measuringGrid":"function measuringGrid(N, img) { for (let x=0; x<N; ++x) for (let y=0; y<N; ++y) {  const v = img[y*N+x];  if (v) level.actors['measurer.'+x+'.'+y] = Object.assign(Object.assign({}, level.actors.measurer), {pos:[x/N, .9999-y/N], displayRadius: v===1?[12,0,4]:v===2?[4,12,0]:[0,4,12], emit: v===1?'blue':v===2?'red':'green', dhealth:{B1:.01, Br: v===1?-.03:.3, Bg: v===2?-.03:.3, Bb: v===3?-.03:.3}, onLost(api, level, name) { level.actors[name].displayRadius=[], api.write(name);  level.score+=.4 }})  };  delete level.actors.measurer }",
    "main":"function main() { makeItEasier(), measuringGrid(32, level.image), initialDialogue() }"
  },

  "onLoad": "let s='';    for (let k in level.funcs) s += 'const '+k+'=level.funcs.'+k+'='+level.funcs[k]+'\\n';    new Function('L', s+'\\nreturn main()')(level)",
  "winScore": 100,
  "onWon": "(async function() { api.levelSuggest('levels/x3/5.json'); \n level.iGrowthCenter[2]+=.1, api.write();  await api.window(`(Done.)`, null, 32);  api.levelLoad('levels/x3/5.json') })()",

  "onLost": "let L=level, n=0, fiery=Math.random(), id=setInterval(() => { if (L===level && n++<100) fiery>.2 && (L.iOffset[1]-=.1), fiery<.6 && (L.iKernelOffset[1]+=fiery<.3?.24:.1), api.write(); else clearInterval(id) }, 100); \n api.window([`(Signal lost.)`], 'pointer1', 32).then(() => api.levelLoad())",

  "iColorMatrix": [
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
  ],

  "width": 512, "height": 512, "radius": 5,
  "iSlowdown": 4,

  "iMixing":[1.183,-1.701,0.416,0.275,0.685,-0.745,-0.433,1.079,2.087],"kernel":{"center":[0.5,0.5,0.5],"width":[0.1,0.1,0.1]},"iGrowthCenter":[0.757,0.701,3],"iGrowthWidth":[0.176,0.332,1.572],"iOffset":[0,0],"iKernelOffset":[0,0],

  "actors": {
    "pointer1": {"displayRadius":[0,16,0], "pos":[0.5, 0.25], "emitRadius":16, "emit":"green", "emittance":1, "speed":{"Bmouse":0.01, "Bg":-0.000, "Bb":-0.000, "Bspeed": 0.93}, "trackLost":true},
    "target1": {"displayRadius":[32,8,0], "pos":[0.6,0.2], "dhealth":{"B1":0.01, "Bg":-0.1}, "onLost":"requestAnimationFrame(() => { const as = level.actors, a = as.pointer1, b = as.target1;  api.read('pointer1'), api.read('target1');  a.emit='red', a.displayRadius=[16,0,0], b.health=1, api.write('pointer1'), api.write('target1') })", "emitRadius":32, "emit":"blue", "emittance":{"B1":10, "Bhealth":-10}},
    "target2": {"displayRadius":[0,32,8], "pos":[0.5,0.2], "dhealth":{"B1":0.01, "Bb":-0.05}, "onLost":"requestAnimationFrame(() => { const as = level.actors, a = as.pointer1, b = as.target2;  api.read('pointer1'), api.read('target2');  a.emit='green', a.displayRadius=[0,16,0], b.health=1, api.write('pointer1'), api.write('target2') })", "emitRadius":32, "emit":"red", "emittance":{"B1":10, "Bhealth":-10}},
    "target3": {"displayRadius":[8,0,32], "pos":[0.4,0.2], "dhealth":{"B1":0.01, "Br":-0.1}, "onLost":"requestAnimationFrame(() => { const as = level.actors, a = as.pointer1, b = as.target3;  api.read('pointer1'), api.read('target3');  a.emit='blue', a.displayRadius=[0,0,16], b.health=1, api.write('pointer1'), api.write('target3') })", "emitRadius":32, "emit":"green", "emittance":{"B1":10, "Bhealth":-10}},
    "measurer": {"pos":[0.5,0.5], "emitRadius":12, "emittance":{"Bhealth":0.1}},
    "center": {"pos":[0.5, 0.5]}
  }
}