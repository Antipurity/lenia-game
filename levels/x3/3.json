{
  "description": "Water the three bonsai trees.",

  "initialDialogue":[
  ],

  "funcs":{
    "dialogue":"async function dialogue(words, at) { await Promise.all(words.map(w => api.window(w, [.05 + .9*Math.random(), .05 + .9*Math.random()], 32))) }",
    "initialDialogue":"async function initialDialogue() { const at=null;  for (let entry of level.initialDialogue) await dialogue(entry, at) }",
    "makeItEasier":"function makeItEasier() { 'no' }",
    "phaseChange":"function phaseChange(phases) { let L=level;  check();  function check() { if (L!==level || !phases.length) return;  requestAnimationFrame(check);  if (typeof phases[0] == 'function' ? phases[0](level.score) : level.score >= phases[0]) phases.shift(), phases.shift()(); } }",
    "bouncies":"function bouncies(n=20000) { const to = level.actors.bouncy.pos, acts = {};  for (let i=0; i<n; ++i) { acts['bouncy.'+i] = { like:'bouncy', pos:[to[0] + .0001*(Math.random()*2-1), to[1] + .0001*(Math.random()*2-1)] } };  level.actors = Object.assign(acts, level.actors) }",
    "main":"function main() { makeItEasier(), bouncies(), phaseChange([score => score<-64, lose]), initialDialogue() }"
  },

  "onLoad": "let s='';    for (let k in level.funcs) s += 'const '+k+'=level.funcs.'+k+'='+level.funcs[k]+'\\n';    new Function('L', s+'\\nreturn main()')(level)",
  "winScore": 100,
  "onWon": "(async function() { api.levelSuggest('levels/x3/4.json'); \n level.iGrowthCenter[2]+=.1, api.write();  await api.window(`(Done.)`, null, 32);  api.levelLoad('levels/x3/4.json') })()",

  "onLost": "let L=level, n=0, fiery=Math.random(), id=setInterval(() => { if (L===level && n++<100) fiery>.2 && (L.iOffset[1]-=.1), fiery<.6 && (L.iKernelOffset[1]+=fiery<.3?.24:.1), api.write(); else clearInterval(id) }, 100); \n api.window([`(Signal lost.)`], 'pointer1', 32).then(() => api.levelLoad())",

  "iColorMatrix": [
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
  ],

  "width": 512, "height": 512, "radius": 4,
  "iSlowdown": 4,

  "iMixing":[-2.513,1.083,-0.05,1.974,0.176,-0.05,-0.05,-0.05,0.556],"kernel":{"center":[0.5,0.5,0.5],"width":[0.1,0.1,0.1]},"iGrowthCenter":[0.5,0.5,0.5],"iGrowthWidth":[0.176,0.1,0.15],"iOffset":[0,0],"iKernelOffset":[0,0],

  "actors": {
    "pointer1": {"displayRadius":[0,16,0], "pos":[0.5, 0.25], "emitRadius":16, "emit":"green", "emittance":1, "speed":{"Bmouse":0.01, "Bg":-0.000, "Bb":-0.000, "Bspeed": 0.93}, "dhealth":{"B1":0.05, "Bb":-0.05}, "trackLost":true},
    "bouncy": {"pos":[0.5,0], "displayRadius":[0,0,6], "emitRadius":8, "emit":"blue", "emittance":0.00, "speed":{"Bspeed":0.99, "Br":-0.01, "Bg":-0.01, "Bb":0.001}, "gravity":[0,-0.0001]},
    "firstTarget": {"displayRadius":[0,32,0], "pos":[0.206,0.785], "dhealth":{"B1":0.001, "Br":-0.05}, "onLost":"level.score += 1;  let i = 0, L=level;  for (let k of Object.keys(level.actors)) if (k.slice(0,6)==='bouncy') setTimeout(() => { if (L!==level) return;  const a = level.actors[k];  a.emittance = .03;  api.write(k) }, ++i)"},
    "target1": {"displayRadius":[0,0,32], "pos":[0.771,0.699], "dhealth":{"B1":0.001, "Bb":-0.01}, "onLost":"level.score += 33"},
    "target2": {"displayRadius":[0,0,32], "pos":[0.537,0.292], "dhealth":{"B1":0.001, "Bb":-0.01}, "onLost":"level.score += 33"},
    "target3": {"displayRadius":[0,0,32], "pos":[0.159,0.225], "dhealth":{"B1":0.001, "Bb":-0.01}, "onLost":"level.score += 33"},
    "center": {"pos":[0.5, 0.5]}
  }
}